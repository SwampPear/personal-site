{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/michaelvaden/Desktop/Projects/personalsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject,\n  _this = this,\n  _jsxFileName = \"/Users/michaelvaden/Desktop/Projects/personalsite/frontend/src/features/posts/Posts.tsx\";\nimport React from 'react';\nimport styles from './Posts.module.css';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { selectDarkModeState, selectDarkModeInit } from '../darkmode/darkModeSlice';\nimport { useQuery, gql } from \"@apollo/client\";\nvar QUERY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query AllPosts {\\n    allPosts {\\n      postId\\n      title\\n      readingTime\\n      content\\n    }\\n  }\\n\"])));\nvar parseData = function parseData(data) {\n  return data.allPosts.map(function (post) {\n    /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, \"Post - \", post.postId, \": \", post.title, \" \", post.readingTime);\n  });\n};\nvar Posts = function Posts() {\n  var dispatch = useAppDispatch();\n  var darkmode = useAppSelector(selectDarkModeState);\n  var darkmodeInit = useAppSelector(selectDarkModeInit);\n  var _useQuery = useQuery(QUERY, {\n      pollInterval: 500\n    }),\n    data = _useQuery.data,\n    loading = _useQuery.loading,\n    error = _useQuery.error;\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginTop: '35rem'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, \"Error\");\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginTop: '5rem'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  alert(JSON.stringify(data.allPosts));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, parseData(data));\n};\nexport default Posts;","map":{"version":3,"names":["React","styles","useAppSelector","useAppDispatch","selectDarkModeState","selectDarkModeInit","useQuery","gql","QUERY","parseData","data","allPosts","map","post","postId","title","readingTime","Posts","dispatch","darkmode","darkmodeInit","pollInterval","loading","error","marginTop","alert","JSON","stringify","container"],"sources":["/Users/michaelvaden/Desktop/Projects/personalsite/frontend/src/features/posts/Posts.tsx"],"sourcesContent":["import React from 'react';\nimport styles from './Posts.module.css'\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport { selectDarkModeState, selectDarkModeInit } from '../darkmode/darkModeSlice'\n\nimport { useQuery, gql } from \"@apollo/client\";\n\nconst QUERY = gql`\n  query AllPosts {\n    allPosts {\n      postId\n      title\n      readingTime\n      content\n    }\n  }\n`\n\nconst parseData = (data: any) => {\n    return (\n        data.allPosts.map((post: any) => {\n        <p>\n            Post - {post.postId}: {post.title} {post.readingTime}\n        </p>\n      })\n    )\n}\n\nconst Posts = () => {\n  const dispatch = useAppDispatch()\n  const darkmode = useAppSelector(selectDarkModeState)\n  const darkmodeInit = useAppSelector(selectDarkModeInit)\n\n  const { data, loading, error } = useQuery( QUERY, { pollInterval: 500 } )\n\n  if (error) return <p style={{marginTop: '35rem'}}>Error</p>;\n  if (loading) return <p style={{marginTop: '5rem'}}>Loading...</p>;\n\n  alert(JSON.stringify(data.allPosts))\n\n  return (\n    <div className={styles.container}>\n      {parseData(data)}\n    </div>\n  )\n}\n\nexport default Posts"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,oBAAoB;AAEvC,SAASC,cAAc,EAAEC,cAAc,QAAQ,iBAAiB;AAChE,SAASC,mBAAmB,EAAEC,kBAAkB,QAAQ,2BAA2B;AAEnF,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAE9C,IAAMC,KAAK,GAAGD,GAAG,oLAShB;AAED,IAAME,SAAS,GAAG,SAAZA,SAAS,CAAIC,IAAS,EAAK;EAC7B,OACIA,IAAI,CAACC,QAAQ,CAACC,GAAG,CAAC,UAACC,IAAS,EAAK;IACjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAG,SACQ,EAACA,IAAI,CAACC,MAAM,EAAC,IAAE,EAACD,IAAI,CAACE,KAAK,EAAC,GAAC,EAACF,IAAI,CAACG,WAAW,CACpD;EACN,CAAC,CAAC;AAER,CAAC;AAED,IAAMC,KAAK,GAAG,SAARA,KAAK,GAAS;EAClB,IAAMC,QAAQ,GAAGf,cAAc,EAAE;EACjC,IAAMgB,QAAQ,GAAGjB,cAAc,CAACE,mBAAmB,CAAC;EACpD,IAAMgB,YAAY,GAAGlB,cAAc,CAACG,kBAAkB,CAAC;EAAA,gBAEtBC,QAAQ,CAAEE,KAAK,EAAE;MAAEa,YAAY,EAAE;IAAI,CAAC,CAAE;IAAjEX,IAAI,aAAJA,IAAI;IAAEY,OAAO,aAAPA,OAAO;IAAEC,KAAK,aAALA,KAAK;EAE5B,IAAIA,KAAK,EAAE,oBAAO;IAAG,KAAK,EAAE;MAACC,SAAS,EAAE;IAAO,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC,OAAK,CAAI;EAC3D,IAAIF,OAAO,EAAE,oBAAO;IAAG,KAAK,EAAE;MAACE,SAAS,EAAE;IAAM,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC,YAAU,CAAI;EAEjEC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACjB,IAAI,CAACC,QAAQ,CAAC,CAAC;EAEpC,oBACE;IAAK,SAAS,EAAEV,MAAM,CAAC2B,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC9BnB,SAAS,CAACC,IAAI,CAAC,CACZ;AAEV,CAAC;AAED,eAAeO,KAAK"},"metadata":{},"sourceType":"module"}